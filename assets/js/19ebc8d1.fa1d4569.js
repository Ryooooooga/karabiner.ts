"use strict";(self.webpackChunkkarabiner_ts_docs=self.webpackChunkkarabiner_ts_docs||[]).push([[364],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,y=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return n?o.createElement(y,i(i({ref:t},c),{},{components:n})):o.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={title:"Utilities"},i=void 0,l={unversionedId:"utils",id:"utils",title:"Utilities",description:"There are a few util methods for reducing code duplication.",source:"@site/docs/utils.md",sourceDirName:".",slug:"/utils",permalink:"/utils",draft:!1,tags:[],version:"current",frontMatter:{title:"Utilities"},sidebar:"docs",previous:{title:"type: mouse_motion_to_scroll",permalink:"/manipulators/mouse_motion_to_scroll"},next:{title:"Imports",permalink:"/imports"}},p={},s=[{value:"withMapper()",id:"with-mapper",level:2},{value:"withCondition()",id:"with-condition",level:2},{value:"withModifier()",id:"with-modifier",level:2}],c={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are a few util methods for reducing code duplication. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#with-mapper"},"withMapper()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#with-condition"},"withCondition()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#with-modifier"},"withModifier()"))),(0,r.kt)("h2",{id:"with-mapper"},"withMapper()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"withMapper()")," takes either an array or a object, and a mapper function to\ncreate manipulators with each item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"rule('mappers').manipulators([\n  //           1    2    3    4    5\n  withMapper(['\u2318', '\u2325', '\u2303', '\u21e7', '\u21ea'])((k, i) =>\n    map((i + 1) as NumberKeyValue).toPaste(k),\n  ),\n  withMapper({\n    c: 'Calendar',\n    f: 'Finder',\n  })((k, v) => map(k, 'Meh').toApp(v)),\n])\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Generated JSON"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "mappers",\n  "manipulators": [\n    {\n      "type": "basic",\n      "from": {"key_code": "1"},\n      "to": [{"shell_command": "osascript -e \'\\nset prev to the clipboard\\nset the clipboard to \\"\u2318\\"\\ntell application \\"System Events\\"\\n  keystroke \\"v\\" using command down\\n  delay 0.1\\nend tell\\nset the clipboard to prev\'"}]\n    },\n    {\n      "type": "basic",\n      "from": {"key_code": "2"},\n      "to": [{"shell_command": "osascript -e \'\\nset prev to the clipboard\\nset the clipboard to \\"\u2325\\"\\ntell application \\"System Events\\"\\n  keystroke \\"v\\" using command down\\n  delay 0.1\\nend tell\\nset the clipboard to prev\'"}]\n    },\n    {\n      "type": "basic",\n      "from": {"key_code": "3"},\n      "to": [{"shell_command": "osascript -e \'\\nset prev to the clipboard\\nset the clipboard to \\"\u2303\\"\\ntell application \\"System Events\\"\\n  keystroke \\"v\\" using command down\\n  delay 0.1\\nend tell\\nset the clipboard to prev\'"}]\n    },\n    {\n      "type": "basic",\n      "from": {"key_code": "4"},\n      "to": [{"shell_command": "osascript -e \'\\nset prev to the clipboard\\nset the clipboard to \\"\u21e7\\"\\ntell application \\"System Events\\"\\n  keystroke \\"v\\" using command down\\n  delay 0.1\\nend tell\\nset the clipboard to prev\'"}]\n    },\n    {\n      "type": "basic",\n      "from": {"key_code": "5"},\n      "to": [{"shell_command": "osascript -e \'\\nset prev to the clipboard\\nset the clipboard to \\"\u21ea\\"\\ntell application \\"System Events\\"\\n  keystroke \\"v\\" using command down\\n  delay 0.1\\nend tell\\nset the clipboard to prev\'"}]\n    },\n    {\n      "type": "basic",\n      "from": {"key_code": "c", "modifiers": {"mandatory": ["option", "control", "shift"]}},\n      "to": [{"shell_command": "open -a \\"Calendar\\".app"}]\n    },\n    {\n      "type": "basic",\n      "from": {"key_code": "f", "modifiers": {"mandatory": ["option", "control", "shift"]}},\n      "to": [{"shell_command": "open -a \\"Finder\\".app"}]\n    }\n  ]\n}\n'))),(0,r.kt)("p",null,"Most of the time ",(0,r.kt)("inlineCode",{parentName:"p"},"withMapper()")," method can infer the type from the array or object.\nHowever it only infer the object value as generic types like ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", which is\nsometimes not enough for  the mappers. To solve this you can either manually add\nthe types to the method call, or add ",(0,r.kt)("inlineCode",{parentName:"p"},"as const")," on the object. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"withMapper<FromKeyParam, ToKeyParam>({})(/* ... */)\nwithMapper({} as const)(/* ... */)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"as const")," is simpler to add; the benefit of adding types to the method is code\ncompletion when writing the object. "),(0,r.kt)("h2",{id:"with-condition"},"withCondition()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"withCondition()")," is useful when a subset of manipulators inside a rule or\nlayer/simlayer share the same condition(s). "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"rule('conditions').manipulators([\n  withCondition(ifDevice({ product_id: 1 }))([\n    map('a').to('x'), \n  ]),\n  withCondition(ifDevice({ product_id: 2 }))([\n    map('a').to('y'), \n  ]),\n])\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Generated JSON"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "conditions",\n  "manipulators": [\n    {\n      "type": "basic",\n      "from": {"key_code": "a"},\n      "to": [{"key_code": "x"}],\n      "conditions": [{"type": "device_if", "identifiers": [{"product_id": 1}]}]\n    },\n    {\n      "type": "basic",\n      "from": {"key_code": "a"},\n      "to": [{"key_code": "y"}],\n      "conditions": [{"type": "device_if", "identifiers": [{"product_id": 2}]}]\n    }\n  ]\n}\n'))),(0,r.kt)("h2",{id:"with-modifier"},"withModifier()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"withModifier()"),"add the same modifiers to a group of manipulators. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"rule('modifiers').manipulators([\n  withModifier('optionalAny')([\n    map(1, '\u2318').to('a'),\n    map(1, '\u2325').to('b'),\n  ]),\n])\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Generated JSON"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "modifiers",\n  "manipulators": [\n    {\n      "type": "basic",\n      "from": {"key_code": "1", "modifiers": {"mandatory": ["command"], "optional": ["any"]}},\n      "to": [{"key_code": "a"}]\n    },\n    {\n      "type": "basic",\n      "from": {"key_code": "1", "modifiers": {"mandatory": ["option"], "optional": ["any"]}},\n      "to": [{"key_code": "b"}]\n    }\n  ]\n}\n'))))}m.isMDXComponent=!0}}]);